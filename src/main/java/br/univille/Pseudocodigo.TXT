se valor < noAtual.valor:
    noAtual.esq = inserirRec(noAtual.esq, valor)
senão se valor > noAtual.valor:
    noAtual.dir = inserirRec(noAtual.dir, valor)
senão:
    // valores iguais: opcionalmente ignorar ou tratar
    retornar noAtual

// 1) atualiza altura
noAtual.altura = 1 + max(altura(noAtual.esq), altura(noAtual.dir))

// 2) calcula fator de balanceamento
fb = fatorBalanceamento(noAtual)

// 3) casos de rotação

// Caso LL: fb > 1 e valor < noAtual.esq.valor
se fb > 1 e valor < noAtual.esq.valor:
    retornar rotacaoDireita(noAtual)

// Caso RR: fb < -1 e valor > noAtual.dir.valor
se fb < -1 e valor > noAtual.dir.valor:
    retornar rotacaoEsquerda(noAtual)

// Caso LR: fb > 1 e valor > noAtual.esq.valor
se fb > 1 e valor > noAtual.esq.valor:
    noAtual.esq = rotacaoEsquerda(noAtual.esq)
    retornar rotacaoDireita(noAtual)

// Caso RL: fb < -1 e valor < noAtual.dir.valor
se fb < -1 e valor < noAtual.dir.valor:
    noAtual.dir = rotacaoDireita(noAtual.dir)
    retornar rotacaoEsquerda(noAtual)

retornar noAtual
rotacaoDireita(y): x = y.esq T2 = x.dir // Rotaciona x.dir = y y.esq = T2 // Atualiza alturas y.altura = 1 + max(altura(y.esq), altura(y.dir)) x.altura = 1 + max(altura(x.esq), altura(x.dir)) retornar x

rotacaoEsquerda(x): y = x.dir T2 = y.esq // Rotaciona y.esq = x x.dir = T2 // Atualiza alturas x.altura = 1 + max(altura(x.esq), altura(x.dir)) y.altura = 1 + max(altura(y.esq), altura(y.dir)) retornar y